# Generated by Django 3.2.7 on 2021-10-12 18:12

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('one_use_account_password', models.CharField(blank=True, max_length=50, null=True)),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('is_customer', models.BooleanField(default=False, verbose_name='customer')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Drink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('complicated', models.CharField(choices=[('EASY', 'easy'), ('MEDIUM', 'medium'), ('HARD', 'hard')], max_length=255, verbose_name='complicated')),
                ('is_possible_to_make', models.BooleanField(default=False, verbose_name='is possible to make')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='Date created')),
                ('date_modified', models.DateField(auto_now=True, verbose_name='Date modified')),
            ],
            options={
                'verbose_name': 'drink',
                'verbose_name_plural': 'drinks',
            },
        ),
        migrations.CreateModel(
            name='IngredientStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('type', models.CharField(choices=[('LIQUID', 'liquid'), ('OTHER', 'other')], max_length=255, verbose_name='type')),
                ('unit', models.CharField(choices=[('MILLILITER', 'milliliter'), ('PIECE', 'piece')], max_length=255, verbose_name='unit')),
                ('image', models.FileField(null=True, upload_to='D:\\Coding\\Bartender_Assistant/static/media', verbose_name='image')),
                ('storage_amount', models.DecimalField(decimal_places=3, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='amount in storage')),
            ],
            options={
                'verbose_name': 'ingredient in storage',
                'verbose_name_plural': 'ingredients in storage',
            },
        ),
        migrations.CreateModel(
            name='IngredientNeeded',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=3, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='amount needed')),
                ('is_enough_to_make_drink', models.BooleanField(default=False)),
                ('drink', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_needed', to='core.drink', verbose_name='drink')),
                ('storage_ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_needed', to='core.ingredientstorage', verbose_name='ingredient in storage')),
            ],
            options={
                'verbose_name': 'ingredient needed',
                'verbose_name_plural': 'ingredients needed',
            },
        ),
        migrations.CreateModel(
            name='DrinkQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('CREATED', 'created'), ('ACCEPTED', 'accepted'), ('IN_PROGRESS', 'in progress'), ('COMPLETED', 'completed'), ('REJECTED', 'rejected')], max_length=255, verbose_name='complicated')),
                ('drink', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drink_queue', to='core.drink', verbose_name='order')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drink_queue', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
            },
        ),
    ]
